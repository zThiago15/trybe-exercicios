-- **1.**Â Escreva uma query que exiba o maior salÃ¡rio da tabela.
SELECT MAX(salary) FROM hr.employees;

-- **2.**Â ðŸš€ Escreva uma query que exiba a diferenÃ§a entre o maior e o menor salÃ¡rio.
SELECT (MAX(salary) - MIN(salary)) FROM hr.employees;

-- **3.**Â ðŸš€ Escreva uma query que exiba a mÃ©dia salarial de cadaÂ `job_id`, ordenando pela mÃ©dia salarial em ordem decrescente.
SELECT AVG(salary) AS media_salarial FROM hr.employees
GROUP BY job_id
ORDER BY media_salarial DESC;

-- **4.**Â Escreva uma query que exiba a quantidade de dinheiro necessÃ¡ria para realizar o pagamento de todas as pessoas funcionÃ¡rias.
SELECT SUM(salary) FROM hr.employees;

-- **5.**Â ðŸš€ Escreva uma query que exiba quatro informaÃ§Ãµes: o maior salÃ¡rio, o menor salÃ¡rio, a soma de todos os salÃ¡rios e a mÃ©dia dos salÃ¡rios. Todos os valores devem ser formatados para ter apenas duas casas decimais.
SELECT FORMAT(MAX(salary), 2), FORMAT(MIN(salary), 2), 
FORMAT(SUM(salary), 2), FORMAT(AVG(salary), 2)
FROM hr.employees;

-- **6.**Â Escreva uma query que exiba a quantidade de pessoas que trabalham como pessoas programadoras (`it_prog`).
SELECT COUNT(employee_id) FROM hr.employees
WHERE LCASE(job_id) = 'it_prog';

-- **7.**Â Escreva uma query que exiba a quantidade de dinheiro necessÃ¡ria para efetuar o pagamento de cada profissÃ£o (`job_id`).
SELECT job_id, SUM(salary) FROM hr.employees
GROUP BY job_id;

-- **8.**Â Utilizando a query anterior, faÃ§a as alteraÃ§Ãµes para que seja exibido somente a quantidade de dinheiro necessÃ¡ria para cobrir a folha de pagamento das pessoas programadoras (`it_prog`).
SELECT SUM(salary) FROM hr.employees
WHERE LCASE(job_id) = 'it_prog';

-- **9.**Â Escreva uma query que exiba em ordem decrescente a mÃ©dia salarial de todos os cargos, exceto das pessoas programadoras (`it_prog`).
SELECT job_id, AVG(salary) FROM hr.employees
WHERE LCASE(job_id) != 'it_prog'
GROUP BY job_id;

-- **10.**Â ðŸš€ Escreva um query que exiba mÃ©dia salarial e o nÃºmero de funcionÃ¡rios de todos os departamentos com mais de dez funcionÃ¡rios.Â **Dica:**Â agrupe peloÂ `department_id`.
SELECT AVG(salary) AS media, COUNT(*) AS quantidade_funcionarios FROM hr.employees
GROUP BY department_id
HAVING quantidade_funcionarios > 10;

-- **11.**Â ðŸš€ Escreva uma query que atualize a colunaÂ `phone_number`, de modo que todos os telefones iniciados porÂ `515`Â agora devem iniciar comÂ `777`.
UPDATE hr.employees
SET phone_number = REPLACE(phone_number, '515', '777')
WHERE phone_number LIKE '515%';

-- **12.**Â Escreva uma query que sÃ³ exiba as informaÃ§Ãµes dos funcionÃ¡rios cujo o primeiro nome tenha oito ou mais caracteres.
SELECT * FROM hr.employees
WHERE CHAR_LENGTH(first_name) = 8;

-- **13.**Â Escreva uma query que exiba as seguintes informaÃ§Ãµes de cada funcionÃ¡rio:Â `id`,Â `primeiro nome`Â eÂ `ano no qual foi contratado`Â (exiba somente o ano).
SELECT employee_id, first_name, YEAR(hire_date) FROM hr.employees;

-- **14.**Â ðŸš€ Escreva uma query que exiba as seguintes informaÃ§Ãµes de cada funcionÃ¡rio:Â `id`,Â `primeiro nome`Â eÂ `dia do mÃªs no qual foi contratado`Â (exiba somente o dia).
SELECT employee_id, first_name, DAY(hire_date) FROM hr.employees;

-- **15.**Â Escreva uma query que exiba as seguintes informaÃ§Ãµes de cada funcionÃ¡rio:Â `id`,Â `primeiro nome`Â eÂ `mÃªs no qual foi contratado`Â (exiba somente o mÃªs).
SELECT employee_id, first_name, MONTH(hire_date) FROM hr.employees;

-- **16.**Â Escreva uma query que exiba os nomes dos funcionÃ¡rios em letra maiÃºscula.
SELECT UCASE(first_name), UCASE(last_name) FROM hr.employees;

-- **17:**Â Escreva uma query que exiba o sobrenome e a data de contrataÃ§Ã£o de todos os funcionÃ¡rio contratados em julho de 1987.
SELECT last_name, hire_date FROM hr.employees
WHERE DATE(hire_date) LIKE '1987-07%';

-- **18:**Â ðŸš€ Escreva uma query que exiba as seguintes informaÃ§Ãµes de cada funcionÃ¡rio:Â `nome`,Â `sobrenome`,Â `tempo que trabalha na empresa (em dias)`.
SELECT first_name, last_name, (DATEDIFF(NOW(), hire_date)) AS 'dias de trabalho'  FROM hr.employees;
